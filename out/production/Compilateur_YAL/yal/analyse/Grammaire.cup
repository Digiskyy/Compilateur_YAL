package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, EGAL, LIRE, SI, ALORS, SINON, FINSI;
terminal Symbol    PLUS, MOINS, FOIS, DIVISE, DIFFERENT, EGALEGAL, SUPERIEUR, INFERIEUR;
terminal String    IDF, CSTENTIERE, TYPE;

/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG;
non terminal BlocDInstructions LINST, LDECL;
non terminal Expression EXP;
non terminal Instruction INST, DECL, DECL_VAR, AFF, CONDITION;


/* Priorities of operations */

precedence left EGALEGAL, DIFFERENT;
precedence left INFERIEUR, SUPERIEUR;
precedence left PLUS, MOINS;
precedence left FOIS, DIVISE;


/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     PROGRAMME IDF DEBUT LDECL:ld LINST:li FIN
                {: RESULT = li ; :}
                |
                PROGRAMME IDF DEBUT LINST:li FIN
                {: RESULT = li ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                AFF:a
                {: RESULT = a ; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(i, ileft+1); :}
        |
                CONDITION:c
                {: RESULT = c ; :}
                ;


EXP    ::=      CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
                IDF:i
                {: RESULT = new Variable(i, ileft + 1) ; :}
        |
                EXP:gauche PLUS EXP:droite
                {: RESULT = new Addition(gauche, droite, droiteleft + 1) ; :}
        |
                EXP:gauche MOINS EXP:droite
                {: RESULT = new Soustraction(gauche, droite, droiteleft + 1) ; :}
        |
                EXP:gauche FOIS EXP:droite
                {: RESULT = new Multiplication(gauche, droite, droiteleft + 1) ; :}
        |
                EXP:gauche DIVISE EXP:droite
                {: RESULT = new Division(gauche, droite, droiteleft + 1) ; :}
        |
                EXP:gauche INFERIEUR EXP:droite
                {: RESULT = new PlusPetitQue(gauche, droite, droiteleft + 1); :}
        |
                EXP:gauche SUPERIEUR EXP:droite
                {: RESULT = new PlusGrandQue(gauche, droite, droiteleft + 1) ; :}
        |
                EXP:gauche EGALEGAL EXP:droite
                {: RESULT = new Egal(gauche, droite, droiteleft + 1) ; :}
        |
                EXP:gauche DIFFERENT EXP:droite
                {: RESULT = new Different(gauche, droite, droiteleft + 1) ; :}
                ;

LDECL   ::=     LDECL:ld DECL:d
                {: if(d != null) { ld.ajouter(d); }
                   RESULT = ld; :}
        |
                DECL:d
                {: BlocDInstructions ld = new BlocDInstructions(dleft + 1);
                   if(d != null) { ld.ajouter(d); }
                   RESULT = ld; :}
                ;

DECL    ::=     DECL_VAR:dv
                {: RESULT = dv; :}
                ;

DECL_VAR   ::=  TYPE:t IDF:i POINTVIRGULE
                {: Entree e = new Entree(i);
                   Symbole s = new Symbole(t);
                   TDS.getInstance().ajouter(e, s); :}
                ;

AFF        ::=  IDF:i EGAL CSTENTIERE:c POINTVIRGULE
                {: RESULT = new AffectationConstanteEntiere(i, new ConstanteEntiere(c, cleft + 1)) ; :}
         |
                IDF:i EGAL IDF:v POINTVIRGULE
                {: RESULT = new AffectationVariable(i, v, vleft+1) ; :}
                ;


CONDITION ::=   SI EXP:e ALORS LINST:li FINSI
                {: RESULT = new Condition(e, li) ; :}
        |
                SI EXP:e ALORS LINST:li SINON LINST:ls FINSI
                {: RESULT = new Condition(e, li,ls) ; :}
                ;
