package yal.analyse ;

import java_cup.symbol;
import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.arbre.expressions.operations.*;
import yal.arbre.expressions.operations.predicats.*;
import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, EGAL, LIRE, PARENOUV, PARENFERM, FONCTION;
terminal Symbol    PLUS, MOINS, FOIS, DIVISE, DIFFERENT, EGALEGAL, SUPERIEUR, INFERIEUR, RETOUR;
terminal Symbol    SI, ALORS, SINON, FINSI, TANTQUE, REPETER, FINTANTQUE, ET, OU, NON;
terminal String    IDF, TYPE, CSTENTIERE;

/* Non terminals used in the grammar section.  */

non terminal symbol START_PROGRAMME, START_FONCTION;
non terminal ArbreAbstrait PROG;
non terminal BlocDInstructions LINST, LDECL;
non terminal Expression EXP;
non terminal Instruction INST, DECL, DECL_VAR, AFF, CONDITION, BOUCLE, DECL_FONCTION, RETOURNE;


/* Priorities of operations */

precedence left ET, OU;
precedence left EGALEGAL, DIFFERENT;
precedence left INFERIEUR, SUPERIEUR;
precedence left PLUS, MOINS;
precedence left FOIS, DIVISE;
precedence left PARENOUV, PARENFERM;


/* ----------------------------Grammar Section-------------------- */

start with PROG ;

START_PROGRAMME ::= PROGRAMME
                   {: TDS.getInstance().entreeBloc(); :}
                   ;

PROG    ::=     START_PROGRAMME IDF DEBUT LDECL:ld LINST:li FIN
                {: RESULT = new Prog(ld, li) ;
                 TDS.getInstance().sortieBloc();:}
                |
                START_PROGRAMME IDF DEBUT LINST:li FIN
                {: RESULT = li ;
                 TDS.getInstance().sortieBloc();:}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                AFF:a
                {: RESULT = a ; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(i, ileft+1); :}
        |
                CONDITION:c
                {: RESULT = c ; :}
        |
                BOUCLE:b
                {: RESULT = b ; :}
        |
                RETOURNE:r
                {: RESULT = r ; :}
                ;


EXP    ::=      CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
                IDF:i
                {: RESULT = new Variable(i, ileft + 1) ; :}
        |
                EXP:gauche PLUS EXP:droite
                {: RESULT = new Addition(gauche, droite) ; :}
        |
                EXP:gauche MOINS EXP:droite
                {: RESULT = new Soustraction(gauche, droite) ; :}
        |
                EXP:gauche FOIS EXP:droite
                {: RESULT = new Multiplication(gauche, droite) ; :}
        |
                EXP:gauche DIVISE EXP:droite
                {: RESULT = new Division(gauche, droite) ; :}
        |
                EXP:gauche INFERIEUR EXP:droite
                {: RESULT = new PlusPetitQue(gauche, droite); :}
        |
                EXP:gauche SUPERIEUR EXP:droite
                {: RESULT = new PlusGrandQue(gauche, droite) ; :}
        |
                EXP:gauche EGALEGAL EXP:droite
                {: RESULT = new Egal(gauche, droite) ; :}
        |
                EXP:gauche DIFFERENT EXP:droite
                {: RESULT = new Different(gauche, droite) ; :}
        |
                MOINS EXP:e
                {: RESULT = new Inverse(e) ; :}
        |
                PARENOUV EXP:e PARENFERM
                {: RESULT = e ; :}
        |
                EXP:gauche OU EXP:droite
                {: RESULT = new Ou(gauche, droite) ; :}
        |
                EXP:gauche ET EXP:droite
                {: RESULT = new Et(gauche, droite) ; :}
        |
                NON EXP:e
                {: RESULT = new Non(e) ; :}
        |
                IDF:i PARENOUV PARENFERM
                {: RESULT = new AppelFonction(i, ileft+1) ; :}
                ;

LDECL   ::=     LDECL:ld DECL:d
                {: if(d != null) { ld.ajouter(d);}
                   RESULT = ld; :}
        |
                DECL:d
                {: BlocDInstructions ld = new BlocDInstructions(dleft + 1);
                   if(d != null) { ld.ajouter(d); }
                   RESULT = ld; :}
                ;

DECL    ::=     DECL_VAR:dv
                {: RESULT = dv; :}
        |
                DECL_FONCTION:df
                {: RESULT = df; :}
                ;

DECL_VAR   ::=  TYPE:t IDF:i POINTVIRGULE
                {: Entree e = new Entree(i);
                   Symbole s = new SymboleVariable(t);
                   TDS.getInstance().getBlocActuel().ajouter(e, s); :}
                ;

AFF        ::=  IDF:i EGAL EXP:e POINTVIRGULE
                {: RESULT = new Affectation(i, e) ; :}
                ;


CONDITION ::=   SI EXP:e ALORS LINST:li FINSI
                {: RESULT = new Condition(e, li) ; :}
        |
                SI EXP:e ALORS LINST:li SINON LINST:ls FINSI
                {: RESULT = new Condition(e, li, ls) ; :}
                ;

BOUCLE    ::=   TANTQUE EXP:e REPETER LINST:li FINTANTQUE
                {: RESULT = new Boucle(e, li) ; :}
                ;

RETOURNE ::=    RETOUR EXP:e POINTVIRGULE
                {: RESULT = new Retourner(e); :}
                ;

START_FONCTION ::= FONCTION
                   {: TDS.getInstance().entreeBloc(); :}
                   ;

DECL_FONCTION ::= START_FONCTION IDF:i PARENOUV PARENFERM DEBUT LDECL:ld LINST:li FIN
                  {: RESULT = new Fonction(i, li) ;
                  Entree entree = new Entree(i);
                  SymboleVariable symbole = new SymboleVariable("entier");
                  TDS.getInstance().sortieBloc();
                  TDS.getInstance().getBlocActuel().ajouter(entree, symbole);
                  :}
         |
                   START_FONCTION IDF:i PARENOUV PARENFERM DEBUT LINST:li FIN
                   {: RESULT = new Fonction(i, li) ;
                    Entree entree = new Entree(i);
                    SymboleVariable symbole = new SymboleVariable("entier");
                    TDS.getInstance().sortieBloc();
                    TDS.getInstance().getBlocActuel().ajouter(entree, symbole);
                    :}
                    ;

